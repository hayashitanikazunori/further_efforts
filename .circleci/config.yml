# version: 2
# jobs:
#   build:
#     docker:
#       - image: circleci/ruby:2.7.1
#         environment:
#           RAILS_ENV: test
#           PGHOST: 127.0.0.1
#           POSTGRES_USER: further_efforts
#       - image: circleci/postgresql:12.3
#         environment:
#           - POSTGRES_USER: further_efforts
#           - POSTGRES_HOST_AUTH_METHOD: trust # パスワード無しでDBにログインできる。
#           - POSTGRES_DB: further_efforts_test # DB名を命名
#     working_directory: ~/further_efforts
#     steps:
#       - checkout
#       - restore_cache:
#         keys:
#           - v1-dependencies-{{ checksum "Gemfile.lock" }}
#           - v1-dependencies-
#       - run:
#           name: install dependencies
#           command: |
#             gem install bundler -v 2.1.4
#             bundle install --jobs=4 --retry=3 --path vendor/bundle
#       - save_cache:
#           key: v1-dependencies-{{ checksum "Gemfile.lock" }}
#           paths:
#             - ./vendor/bundle
#       - run:
#           name: DBの起動を待つ
#           command: dockerize -wait tcp://127.0.0.1:5432 -timeout 120s
#       - run: bundle exec rake db:create
#       - run: bundle exec rake db:schema:load
#       - run:
#           name: rspecを実行
#           command: bundle exec rspec

# version: 2.1

# orbs:
#   ruby: circleci/ruby@1.1.0
#   node: circleci/node@2

# jobs:
#   build:
#     docker:
#       - image: cimg/ruby:2.7.1
#     steps:
#       - checkout
#       - ruby/install-deps
#       # Store bundle cache
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#   test:
#     parallelism: 3
#     docker:
#       - image: cimg/ruby:2.7.1
#       - image: circleci/postgres:12.3
#         environment:
#           POSTGRES_USER: further_efforts
#           POSTGRES_DB: further_efforts_test
#           POSTGRES_HOST_AUTH_METHOD: trust
#           # POSTGRES_PASSWORD: "password"
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       PGHOST: 127.0.0.1
#       PGUSER: further_efforts
#       PGPASSWORD: ""
#       RAILS_ENV: test
#     steps:
#       - checkout
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
#       # Run rspec in parallel
#       - ruby/rspec-test

# workflows:
#   version: 2
#   build_and_test:
#     jobs:
#       - build
#       - test:
#           requires:
#             - build
version: 2 # CircleCI 2.0 を使用します
jobs: # 一連のステップ
  build: # ワークフローを使用しない実行では、エントリポイントとして `build` ジョブが必要です
    parallelism: 3 # このジョブのインスタンスを 3 つ並列実行します
    docker: # Docker でステップを実行します
      - image: circleci/ruby:2.7.1 # このイメージをすべての `steps` が実行されるプライマリ コンテナとして使用します
        environment: # プライマリ コンテナの環境変数
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: further_efforts
          RAILS_ENV: test
      - image: circleci/postgres:12.3 # データベース イメージ
        environment: # データベースの環境変数
          POSTGRES_USER: further_efforts
          POSTGRES_DB: further_efforts_test
          POSTGRES_PASSWORD: ""
    steps: # 実行可能コマンドの集合
      - checkout # ソース コードを作業ディレクトリにチェックアウトする特別なステップ

      # Bundler のバージョンを指定します

      - run:
          name: Bundler の指定
          command: bundle -v 2.1.4

      # バンドル キャッシュを復元します
      # 依存関係キャッシュについては https://circleci.com/ja/docs/2.0/caching/ をお読みください

      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run: # Ruby の依存関係をインストールします
          name: バンドル インストール
          command: bundle check --path vendor/bundle || bundle install --deployment

      # Ruby の依存関係のバンドル キャッシュを保存します

      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # アプリケーションで Webpacker または Yarn を他の何らかの方法で使用する場合にのみ必要です

      - restore_cache:
          keys:
            - further_efforts-yarn-{{ checksum "yarn.lock" }}
            - further_efforts-yarn-

      - run:
          name: Yarn のインストール
          command: yarn install --cache-folder ~/.cache/yarn

      # Yarn または Webpacker のキャッシュを保存します

      - save_cache:
          key: further_efforts-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: DB の待機
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: データベースのセットアップ
          command: bin/rails db:schema:load --trace

      - run:
          name: RSpec の並列実行
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # タイミング解析のテスト結果を保存します

      - store_test_results: # テスト サマリー (https://circleci.com/ja/docs/2.0/collect-test-data/) に表示するテスト結果をアップロードします
          path: test_results
      # デプロイの構成例については https://circleci.com/ja/docs/2.0/deployment-integrations/ を参照してください